import os
import tempfile

import pytest

import main


@pytest.fixture
def client():
    main.app.config['TESTING'] = True
    with main.app.test_client() as client:
        yield client

def test_get_root(client):
    res = client.get('/')
    assert b'ok' in res.data

def test_get_vector_json_success(client):
    res = client.get('/vector.json?url=https://pbs.twimg.com/profile_images/1262258309479858176/XDn-m3DI_x96.jpg')
    assert res.headers['Content-Type'] == 'application/json'
    assert b'content_vector' in res.data

def test_post_vector_json_success(client):
    res = client.post('/vector.json', data=dict(
        image_b64="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BfulCKqtwwXO6arJQGFojupeYQdHQt1TLaV0pKI9TqCzPbHVLRQWLI1hgsDxU9AhdNRXkUliTyUVmp0pSIeMfucWabjxRViCWSy0KwkJ2oeX8acxPpuMP8xUNYuPS4Py/KSYgIlN26T7pkQoBOcGPxUO42iLJQBilPQQZgVegp2JVuRFz9KReIy7F1Ag0ANDQyxBZ9VPGTUa11JURhMu0QNys3qXVRmCB2kvmaYrAIAtgaiJdA0cfThlQI0c0xYTrJ51iaWpIDzkcVl8Hu0IIEbjOaYZQgzdaPcxUGmegbLJZpN5tQBU2k5wJEoUcJqWrbiFh4HuosbNxRMZ26/CzQi/ExCQWbh6q/d+sq+4J9PFSaBRFJGYEqb/AGCGSTaW5hNUKJZCp4V//9kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA=="
    ))
    assert res.headers['Content-Type'] == 'application/json'
    assert b'content_vector' in res.data